{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;\f2\fswiss\fcharset0 Helvetica-Oblique;
\f3\fswiss\fcharset0 Helvetica-BoldOblique;}
{\colortbl;\red255\green255\blue255;\red24\green25\blue26;\red255\green255\blue255;\red0\green0\blue0;
\red9\green47\blue157;\red24\green25\blue26;}
{\*\expandedcolortbl;;\cssrgb\c12549\c12941\c13333;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c2353\c27059\c67843;\cssrgb\c12549\c12941\c13333;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs26 \cf0 Chapter 3:\
\

\fs24 \ul Abstraction:
\f1\b0 \ulnone  The process of taking something concrete and stripping it of specifics.\
\
Abstraction is like an onion- lower level functions get used frequently but are unchanged, while higher level functions change frequently but call on lower level functions.\
\
It\'92s common for early career programmers to write one long, procedural program that gets a job done, but this leads to poor maintainability and causes people to read hundreds of lines of code to pinpoint where code needs to change. Abstraction makes it easier to pinpoint where changes need to be made.\
\
It is important though when abstracting code to write clear comments and \ul documentation\ulnone  to avoid the abstraction (function) becoming a black box.\
\
* To add additional context to a module, class, method, or function, you can use what are called 
\f2\i \ul docstrings
\f1\i0 \ulnone . These are special lines near the beginning of the creation of the module/class/etc that tell the reader how the code behaves; \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 a\'a0docstring\'a0is a\'a0\cf4 \strokec5 string literal\cf2 \strokec2 \'a0specified in\'a0\cf4 \strokec5 source code\cf2 \strokec2 \'a0that is used, like a\'a0\cf4 \strokec5 comment\cf2 \strokec2 , to document a specific segment of code\
\
* Decomposition enables abstraction. It helps you handle big ideas in small increments\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf6 \cb3 \outl0\strokewidth0 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \cf2 \cb3 \outl0\strokewidth0 \strokec2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf2 \ul \ulc2 Encapsulation:
\f1\b0 \ulnone  the basis for OOP, taking decomposition one step further.\
\
Encapsulation often happens within a class. In classes, functions become 
\f2\i methods
\f1\i0 , which are similar to functions but are contained in a class. Often, they receive an input that is either an instance of the class or the class itself.\
\
Module are also a form of encapsulation, which are higher level than classes; they group related classes and functions together.\
\
The largest encapsulation available in Python is considered a 
\f2\i package
\f1\i0 . They encapsulate related modules into a directory structure, and often can be distributed on the Python Package Index (PyPI)\'85 equivalent to R Packages on CRAN.\
\
\ul Private methods\ulnone : classes may have private methods and data that cannot be accessed by anyone but instances of the class itself; they are not to be accessed outside of a class. This contrasts to public methods and data, which are often referred to as the 
\f2\i interface
\f1\i0  of the class, as other classes can interface with them. While Python does not have true support for private methods, convention is to prefix this methods with an underscore as a sort of type-hint. 
\f2\i Often times, private methods change from version to version and should not be explicitly relied upon.
\f1\i0 \
\

\f2\i \ul The more methods and data a particular class depends on from another class, the more coupled they become. 
\f3\b This is magnified when a class depends on the internals 
\f2\b0 (private methods) 
\f3\b of another class;
\f2\b0  \ulnone most of the class cannot be improved in isolation without the risk of breaking other code.
\f1\i0 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf6 \cb3 \outl0\strokewidth0 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \cf6 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 \cb3 \outl0\strokewidth0 \strokec2 \

\f0\b \ul Refactoring:
\f1\b0 \ulnone \
\
Refactoring is often an iterative process. Constructs that had made sense previously may seem awkward or forced. When this happens, it is usually time to refactor- time to update how code is structured to serve your needs more effectively.\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf6 \cb3 \outl0\strokewidth0 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 \cb3 \outl0\strokewidth0 \strokec2 \
\
\
\
\
\
}